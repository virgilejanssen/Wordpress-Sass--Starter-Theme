// -----------------------------------------------------------------------------
//
// # G R I D N I K
//
// -----------------------------------------------------------------------------





// :: Classes
// -----------------------------------------------------------------------------


.container{
	width: 100%;
	position: relative;
	box-sizing: border-box;
	@include clearfix;
	div[class^="col"]{
		float: left;
		box-sizing: border-box;
		position: relative;
	}
}

.first{
	clear: left;
}





// :: Main Mixin
// -----------------------------------------------------------------------------


@mixin gridnik($gridnik_map){
	
	@media only screen and (min-width: (#{map-get($gridnik_map, min)}px)) and (max-width: (#{map-get($gridnik_map, max)}px)){
	
		//Outside Layout
		
		@if map-get($gridnik_map, layout) == outside  {
			
			//Container Gutter
			
			@if map-get($gridnik_map, gutter-unit) == '%'  {
				.container{
					padding-right: map-get($gridnik_map, gutter-width) * 1%;
				}
			}
			@else if map-get($gridnik_map, gutter-unit) == 'px'  {
				.container{
					padding-right: map-get($gridnik_map, gutter-width) * 1px;
				}
			}
			
			@else{
				@error "Specify a gutter-unit value (px or %)";
			}
			
			//Classes
			
			@each $number-of-col in map-get($gridnik_map, columns){
				@for $y from 1 through $number-of-col{
					@for $z from 1 through $y{
						.col#{$number-of-col}__span#{$z}of#{$y}{
							width: ((100%)/$y*$z);
							
							@if map-get($gridnik_map, gutter-unit) == '%'  {
								$margin-width : map-get($gridnik_map, gutter-width);
								$actual-margin-width	 : (100%/(100%-$margin-width)*$margin-width);
								padding-left: ($actual-margin-width	*($number-of-col/$y)) * 1%;
							}
							@else if map-get($gridnik_map, gutter-unit) == 'px'  {
								$margin-width : map-get($gridnik_map, gutter-width);
								padding-left: $margin-width * 1px;
							}
							@else{
								@error "Specify a gutter-unit value (px or %)";
							}
							
							&.parent{
								padding-left: 0;
							}
						}
						.col#{$number-of-col}__push#{$z}of#{$y}{
							margin-left: ((100%)/$y*$z);
						}
					}
				}
			}
		
		}
		
		//Inside Layout	
		
		@else if map-get($gridnik_map, layout) == inside {
			
			//Container Margins
			
			@if map-get($gridnik_map, gutter-unit) == '%'  {
				.container{
					margin-right: -(map-get($gridnik_map, gutter-width) * 0.5%);
					margin-left: -(map-get($gridnik_map, gutter-width) * 0.5%);
					width: 104%;
				}
			}
			@else if map-get($gridnik_map, gutter-unit) == 'px'  {
				.container{
					margin-right: -(map-get($gridnik_map, gutter-width) * 0.5px);
					margin-left: -(map-get($gridnik_map, gutter-width) * 0.5px);
					width: calc(100% + #{(map-get($gridnik_map, gutter-width))}*1px);
				}
			}
			
			//Classes
			
			@each $number-of-col in map-get($gridnik_map, columns){
				@for $y from 1 through $number-of-col{
					@for $z from 1 through $y{
						.col#{$number-of-col}__span#{$z}of#{$y}{
							width: ((100%)/$y*$z);
							
							@if map-get($gridnik_map, gutter-unit) == '%'  {
								$margin-width : map-get($gridnik_map, gutter-width);
								$actual-margin-width	 : (100%/(100%+$margin-width)*$margin-width);
								padding-right: ($actual-margin-width	*($number-of-col/$y)) * 0.5%;
								padding-left: ($actual-margin-width	*($number-of-col/$y)) * 0.5%;
							}
							@else if map-get($gridnik_map, gutter-unit) == 'px'  {
								$margin-width : map-get($gridnik_map, gutter-width);
								padding-right: $margin-width * 0.5px;
								padding-left: $margin-width	* 0.5px;
							}
							@else{
								@error "Specify a gutter-unit value (px or %)";
							}
							
							&.parent{
								padding-left: 0;
								padding-right: 0;
							}
						}
						.col#{$number-of-col}__push#{$z}of#{$y}{
							margin-left: ((100%)/$y*$z);
						}
					}
				}
			}
			
		}
		
		//Else
		
		@else{
			@error "Specify a layout value (inside or outside).";
		}
	
	}
	
}




// :: Functions
// -----------------------------------------------------------------------------


@function gridnik__gutter($gridnik_map, $colcount, $relationship, $parent-context:1, $multiplier:1 ){
	
		$number-of-col: map-get($gridnik_map, columns);
		$margin-width : map-get($gridnik_map, gutter-width);
		
		@if map-get($gridnik_map, layout) == outside  {
							
			@if map-get($gridnik_map, gutter-unit) == '%'  {
				$actual-margin-width	 : (100%/(100%-$margin-width)*$margin-width);
				@if $relationship == child  {
					@return (100%/((100%/$number-of-col*$colcount) - ($actual-margin-width))*$actual-margin-width/$multiplier)*1%;
				}
				@else if $relationship == parent  {
					@return ($actual-margin-width * ($number-of-col/$parent-context))/$multiplier * 1%;
				}
				@else{
					@error "Specify a relationship value (parent or child)";
				}
			}
			@else if map-get($gridnik_map, gutter-unit) == 'px'  {
				@return $margin-width*1px;
			}
			@else{
				@error "Specify a gutter-unit value (px or %)";
			}
			
		}	
		
		@else if map-get($gridnik_map, layout) == inside {
			
			@if map-get($gridnik_map, gutter-unit) == '%'  {
				$actual-margin-width	 : (100%/(100%+$margin-width)*$margin-width);
				@if $relationship == child  {
					@return (100%/((100%/$number-of-col*$colcount) - ($actual-margin-width))*$actual-margin-width/$multiplier)*1%;
				}
				@else if $relationship == parent  {
					@return ($actual-margin-width*($number-of-col/$parent-context))/$multiplier * 1%;
				}
				@else{
					@error "Specify a relationship value (parent or child)";
				}
			}
			@else if map-get($gridnik_map, gutter-unit) == 'px'  {
				@return $margin-width*1px;
			}
			@else{
				@error "Specify a gutter-unit value (px or %)";
			}
			
		}
		
		@else{
			@error "Specify a layout value (inside or outside).";
		}	

}


@function gridnik__span($colcount, $context){						
	@return ((100%)/$context*$colcount);
}
